//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `robot.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package agencia.objetos;

public interface Camara extends com.zeroc.Ice.Object
{
    agencia.datos.suscripcion SuscribirRobot(String IORrob, com.zeroc.Ice.Current current);

    agencia.datos.suscripcion SuscribirConsola(String IORcons, com.zeroc.Ice.Current current);

    void BajaRobot(String IORrob, com.zeroc.Ice.Current current);

    void BajaConsola(String IORcons, com.zeroc.Ice.Current current);

    agencia.datos.ListaSuscripcion ObtenerLista(com.zeroc.Ice.Current current);

    agencia.datos.IPYPort ObtenerIPYPortDifusion(com.zeroc.Ice.Current current);

    agencia.datos.Instantanea ObtenerInstantanea(com.zeroc.Ice.Current current);

    void ModificarEscenario(agencia.datos.Escenario esc, com.zeroc.Ice.Current current);

    agencia.datos.Escenario ObtenerEscenario(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::agencia::objetos::Camara"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::agencia::objetos::Camara";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_SuscribirRobot(Camara obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_IORrob;
        iceP_IORrob = istr.readString();
        inS.endReadParams();
        agencia.datos.suscripcion ret = obj.SuscribirRobot(iceP_IORrob, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        agencia.datos.suscripcion.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_SuscribirConsola(Camara obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_IORcons;
        iceP_IORcons = istr.readString();
        inS.endReadParams();
        agencia.datos.suscripcion ret = obj.SuscribirConsola(iceP_IORcons, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        agencia.datos.suscripcion.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_BajaRobot(Camara obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_IORrob;
        iceP_IORrob = istr.readString();
        inS.endReadParams();
        obj.BajaRobot(iceP_IORrob, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_BajaConsola(Camara obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_IORcons;
        iceP_IORcons = istr.readString();
        inS.endReadParams();
        obj.BajaConsola(iceP_IORcons, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_ObtenerLista(Camara obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        agencia.datos.ListaSuscripcion ret = obj.ObtenerLista(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        agencia.datos.ListaSuscripcion.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_ObtenerIPYPortDifusion(Camara obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        agencia.datos.IPYPort ret = obj.ObtenerIPYPortDifusion(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        agencia.datos.IPYPort.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_ObtenerInstantanea(Camara obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        agencia.datos.Instantanea ret = obj.ObtenerInstantanea(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        agencia.datos.Instantanea.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_ModificarEscenario(Camara obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        agencia.datos.Escenario iceP_esc;
        iceP_esc = agencia.datos.Escenario.ice_read(istr);
        inS.endReadParams();
        obj.ModificarEscenario(iceP_esc, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_ObtenerEscenario(Camara obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        agencia.datos.Escenario ret = obj.ObtenerEscenario(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        agencia.datos.Escenario.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "BajaConsola",
        "BajaRobot",
        "ModificarEscenario",
        "ObtenerEscenario",
        "ObtenerIPYPortDifusion",
        "ObtenerInstantanea",
        "ObtenerLista",
        "SuscribirConsola",
        "SuscribirRobot",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_BajaConsola(this, in, current);
            }
            case 1:
            {
                return _iceD_BajaRobot(this, in, current);
            }
            case 2:
            {
                return _iceD_ModificarEscenario(this, in, current);
            }
            case 3:
            {
                return _iceD_ObtenerEscenario(this, in, current);
            }
            case 4:
            {
                return _iceD_ObtenerIPYPortDifusion(this, in, current);
            }
            case 5:
            {
                return _iceD_ObtenerInstantanea(this, in, current);
            }
            case 6:
            {
                return _iceD_ObtenerLista(this, in, current);
            }
            case 7:
            {
                return _iceD_SuscribirConsola(this, in, current);
            }
            case 8:
            {
                return _iceD_SuscribirRobot(this, in, current);
            }
            case 9:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 10:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 11:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 12:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
